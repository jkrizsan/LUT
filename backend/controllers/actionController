const asyncHandler = require('express-async-handler')

const Goal = require('../models/goalModel')
const Action = require('../models/actionModel')

// @desc    Get actions
// @route   GET /api/actions
// @access  Private
const getActions = asyncHandler(async (req, res) => {
  const actions = await Action.find({ goal: req.body.goalid })

  res.status(200).json(actions)
})

// @desc    Set action
// @route   POST /api/actions
// @access  Private
const setAction = asyncHandler(async (req, res) => {
  if (!req.body.text) {
    res.status(400)
    throw new Error('Please add a text field')
  }

  const goal = await Goal.findById(req.body.goalId)
  // Check for goal
  if (!goal) {
    res.status(404)
    throw new Error('Goal not found')
  }

  const action = await Action.create({
    text: req.body.text,
    goal: req.body.goalId,
  })

  res.status(200).json(action)
})

// @desc    Delete action
// @route   DELETE /api/actions/:id
// @access  Private
const deleteAction = asyncHandler(async (req, res) => {
  const action = await Action.findById(req.params.id)

  if (!action) {
    res.status(400)
    throw new Error('Action not found')
  }

  // Check for user
  if (!req.user) {
    res.status(401)
    throw new Error('User not found')
  }

  // Make sure the logged in user matches the goal user
  const goal = await Goal.findById(action.goal)
  if (goal.user.toString() !== req.user.id) {
    res.status(401)
    throw new Error('User not authorized')
  }

  await action.remove()

  res.status(200).json({ id: req.params.id })
})

// @desc    Delete actions by goal
// @route   DELETE /api/actions/goal:id
// @access  Private
const deleteActionByGoal = asyncHandler(async (req, res) => {

  // Check for user
  if (!req.user) {
    res.status(401)
    throw new Error('User not found')
  }

  const goal = await Goal.findById(req.params.id)
  // Check for goal
  if (!goal) {
    res.status(404)
    throw new Error('Goal not found')
  }

  // Make sure the logged in user matches the goal user
  if (goal.user.toString() !== req.user.id) {
    res.status(401)
    throw new Error('User not authorized')
  }

  const actions = await Action.find({id: req.params.id })

  if (actions.length < 1 ) {
    res.status(404)
    throw new Error('Actions not found')
  }
  
  
   Action.deleteMany(
    {goal})
    .then(
        function () {
            // Success
            console.log("Data deleted");
        })
    .catch(
            function (error) {
                // Failure
                console.log(error);
            });


  res.status(200).json({ id: req.params.id })
})


module.exports = {
  getActions,
  setAction,
  deleteAction,
  deleteActionByGoal,
}
